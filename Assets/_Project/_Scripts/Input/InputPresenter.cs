using UnityEngine;
using UnityEngine.InputSystem;
using GoodVillageGames.Core.Actions;
using GoodVillageGames.Core.Util.Locomotion;
using System;

namespace GoodVillageGames.Player.Input
{
    /// <summary>
    /// The PRESENTER!
    /// 1. Listens to raw input events from the VIEW (PlayerInput).
    /// 2. Interprets the input.
    /// 3. Commands the MODEL (ActionHandlers) to perform actions.
    /// </summary>
    [RequireComponent(typeof(PlayerInput))]
    [RequireComponent(typeof(GroundChecker))]
    [RequireComponent(typeof(CharacterMover))]
    [RequireComponent(typeof(CharacterAttacker))]
    [RequireComponent(typeof(CharacterDasher))]
    [RequireComponent(typeof(CharacterJumper))]
    public class InputPresenter : MonoBehaviour
    {
        // --- Dependencies ---
        private CharacterMover _mover;
        private CharacterAttacker _attacker;
        private CharacterDasher _dasher;
        private CharacterJumper _jumper;
        // private CharacterInteractor _interactor;
        // private CharacterSpecialAttacker _specialAttacker;

        // --- State ---
        private float _moveDirection;
        private IS_PlayerActions _inputActions;

        private void Awake()
        {
            _mover = GetComponent<CharacterMover>();
            _attacker = GetComponent<CharacterAttacker>();
            _dasher = GetComponent<CharacterDasher>();
            _jumper = GetComponent<CharacterJumper>();

            _inputActions = new IS_PlayerActions();
        }

        private void OnEnable()
        {
            // Subscribing to the C# events generated by the Input Action Asset
            _inputActions.Player.Enable();
            _inputActions.Player.Move.performed += OnMove;
            _inputActions.Player.Move.canceled += OnMove;

            _inputActions.Player.Jump.performed += OnJumpPerformed;
            _inputActions.Player.Jump.canceled += OnJumpCanceled;

            _inputActions.Player.BasicAttack.performed += OnAttack;
            _inputActions.Player.Dash.performed += OnDashPerformed;
            _inputActions.Player.Dash.canceled += OnDashCanceled;
            
            // _inputActions.Player.Interact.performed += OnInteract;
            // _inputActions.Player.SpecialAttack.performed += OnSpecialAttack;
        }

        private void OnDisable()
        {
            // Unsubscribing to prevent memory leaks
            _inputActions.Player.Disable();
            _inputActions.Player.Move.performed -= OnMove;
            _inputActions.Player.Move.canceled -= OnMove;

            _inputActions.Player.Jump.performed -= OnJumpPerformed;
            _inputActions.Player.Jump.canceled -= OnJumpCanceled;

            _inputActions.Player.BasicAttack.performed -= OnAttack;
            _inputActions.Player.Dash.performed -= OnDashPerformed;
            _inputActions.Player.Dash.performed -= OnDashCanceled;

            // _inputActions.Player.Interact.performed -= OnInteract;
            // _inputActions.Player.SpecialAttack.performed -= OnSpecialAttack;
        }

        private void Update()
        {
            _mover.SetMoveDirection(_moveDirection);
        }

        // --- Event Handler Methods ---

        private void OnMove(InputAction.CallbackContext context)
        {
            _moveDirection = context.ReadValue<float>();
        }

        private void OnAttack(InputAction.CallbackContext context)
        {
            // State check: Can't attack while dashing ;)
            if (_dasher.IsDashing) return;

            _attacker.Attack();
        }

        private void OnDashPerformed(InputAction.CallbackContext context)
        {
            _dasher._isDashPressed = true;
            _dasher.Dash(_moveDirection);
        }

        private void OnDashCanceled(InputAction.CallbackContext context)
        {
            _dasher.CancelDash();
        }

        private void OnJumpPerformed(InputAction.CallbackContext context)
        {
            _jumper._isJumpPressed = true;
            _jumper.Jump();
        }

        private void OnJumpCanceled(InputAction.CallbackContext context)
        {
            _jumper._isJumpPressed = false;
        }
    }
}